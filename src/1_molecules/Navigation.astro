---
import { type SbBlokData, storyblokEditable } from '@storyblok/astro';
// @ts-ignore
import StoryblokComponent from "@storyblok/astro/StoryblokComponent.astro";
import NavigationSvelte from './navigation/Navigation.svelte';

import { getClassName, getPaddingXClasses, getPaddingYClasses, getMarginXClasses, getMarginYClasses, getBreakpointClasses } from '../tailwind/class_name_compiler';
import type { PaddingX, PaddingY} from '../tailwind/types/Padding';
import type { MarginX, MarginY} from '../tailwind/types/Margin';
import type { Breakpoint } from '../tailwind/types/Breakpoint';

interface StoryblokNavigation extends SbBlokData, PaddingX, PaddingY, MarginX, MarginY, Breakpoint {
    component: 'navigation',
    mobile: [SbBlokData],
    mobile_menu: [SbBlokData],
    desktop: [SbBlokData],
}

interface Props {
    blok: StoryblokNavigation;
}

const { blok } = Astro.props;

const paddingClasses = getClassName(blok, {
    decorators: [
        {decorator: getPaddingXClasses},
        {decorator: getPaddingYClasses},
        {decorator: getMarginXClasses},
        {decorator: getMarginYClasses},
    ]
});
const revealMobileClasses = getClassName(blok, {
    decorators: [
        {decorator: getBreakpointClasses, options: {type: 'mobile'}},
    ]
});
const revealDesktopClasses = getClassName(blok, {
    decorators: [
        {decorator: getBreakpointClasses, options: {type: 'desktop'}},
    ]
});
const storyblokEditableData = storyblokEditable(blok);
---

<NavigationSvelte
    paddingClasses={paddingClasses} 
    revealMobileClasses={revealMobileClasses}
    revealDesktopClasses={revealDesktopClasses}
    storyblokEditableData={storyblokEditableData} 
    client:idle
>
    <Fragment slot="mobile-menu">
        {blok.mobile_menu.map(item => {            
            return <StoryblokComponent blok={item} />
        })}
    </Fragment>
    <Fragment slot="mobile">
        {blok.mobile.map(item => {            
            return <StoryblokComponent blok={item} />
        })}
    </Fragment>
    <Fragment slot="desktop">
        {blok.desktop.map(item => {            
            return <StoryblokComponent blok={item} />
        })}
    </Fragment>
</NavigationSvelte>