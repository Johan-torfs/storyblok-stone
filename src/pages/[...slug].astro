---
import { useStoryblokApi, type SbBlokData } from '@storyblok/astro'
// @ts-ignore
import StoryblokComponent from "@storyblok/astro/StoryblokComponent.astro";

export async function getStaticPaths() {
    const storyblokApi = useStoryblokApi()
    const { data } = await storyblokApi.get('cdn/stories', {
        version: import.meta.env.PUBLIC_VERCEL_ENV == 'production' ? 'published' : 'draft',
    });

    const stories = data.stories;    
    return stories.map((entry: any) => {
        let slug = entry.slug == "home" ? undefined : entry.slug;
        return { 
            params: {slug}, 
            props: { 
                blok: entry.content
            }
        }
    });
}

const exludedPages: (string | undefined)[] = []; // Refactor to Regex string

let response = undefined;
const { slug } = Astro.params.slug == undefined ? { slug: "home" } : Astro.params;
if (import.meta.env.PUBLIC_VERCEL_ENV != 'production') {
    if (!exludedPages.includes(slug)) {
        const storyblokApi = useStoryblokApi()        
        response = await storyblokApi.get('cdn/stories/' + slug, {
        version: import.meta.env.PUBLIC_VERCEL_ENV == 'production' ? 'published' : 'draft',
        }).then((response: any ) => {      
            return response;
        }).catch((error: any) => {
            const jsonError = JSON.parse(error);
            return jsonError;
        });
    }

    const errorCode = response.status;
    if (errorCode) return Astro.redirect(`/${errorCode}`);
}

const blok = import.meta.env.PUBLIC_VERCEL_ENV == 'production' ? Astro.props.blok : response.data.story.content;
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Astro</title>

        <script src="https://kit.fontawesome.com/3025c21c68.js" crossorigin="anonymous" defer=true/>

        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Fraunces:opsz,wght@9..144,700&family=Hanken+Grotesk:wght@500;700;800&family=Montserrat:wght@500;700&display=swap" rel="stylesheet">
	</head>
	<body>
        {blok.content?.map((blok: SbBlokData) => {            
            return <StoryblokComponent blok={blok} />
        })}
	</body>
</html>
