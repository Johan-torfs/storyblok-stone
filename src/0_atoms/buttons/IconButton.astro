---
import { storyblokEditable, type SbBlokData } from '@storyblok/astro';
import type { PaddingX, PaddingY } from '../../tailwind/types/Padding';
import type { BorderRadius } from '../../tailwind/types/Border';
import { getBorderRadiusClasses, getClassName, getPaddingXClasses, getPaddingYClasses } from '../../tailwind/class_name_compiler';

interface StoryblokIconButton extends SbBlokData, PaddingX, PaddingY, BorderRadius {
    component: "icon_button" | "button";
    text?: string;
    icon?: {
        type: string;
        icon: string;
    };
    link: {
        linktype: string;
        cached_url: string;
    }
    submit?: boolean;
    type: "primary";
}


interface Props {
    blok: StoryblokIconButton;
}

const { blok } = Astro.props;

if (!blok.link) {
    blok.link = {
        linktype: 'url',
        cached_url: '#',
    };
}

if (blok.link.linktype === 'story') {
    blok.link.cached_url = `/${blok.link.cached_url}`;
}

if (blok.link.cached_url == '/home') {
    blok.link.cached_url = '/';
}

var className = getClassName(blok, {
    decorators: [
        {decorator: getBorderRadiusClasses},
        {decorator: getPaddingXClasses},
        {decorator: getPaddingYClasses},
    ]
});

if (!blok.type) blok.type = 'primary';
switch (blok.type) {
    default:
        className = 'items-center inline-flex focus-visible:outline focus-visible:outline-2 text-base bg-primary-600 border border-transparent dark:bg-primary-400 dark:focus-visible:outline-primary-400 dark:hover:bg-primary-300 dark:text-primary-950 focus-visible:outline-offset-2 focus-visible:outline-primary-600 font-medium hover:bg-primary-700 justify-center px-5 py-3 rounded-full text-white transition';
        break;
}
---

{blok.submit ? 
<button
    {...storyblokEditable(blok)}
    class:list={[className]}
    type="submit"
>
    {blok.icon?.icon ? <i class:list={[blok.icon?.type, blok.icon?.icon]} aria-hidden="true"></i> : null}
    <span class:list={[{"ml-2": !!blok.icon?.type}]}>{blok.text}</span>  
</button>
:
<a
    {...storyblokEditable(blok)}
    href={blok.link?.cached_url}
    class:list={[className]}
    type="button"
>
    {blok.icon?.icon ? <i class:list={[blok.icon?.type, blok.icon?.icon]} aria-hidden="true"></i> : null}
    <span class:list={[{"ml-2": !!blok.icon?.type}]}>{blok.text}</span>  
</a>
}