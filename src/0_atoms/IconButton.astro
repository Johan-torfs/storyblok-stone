---
import { storyblokEditable, type SbBlokData } from '@storyblok/astro';
import type { PaddingX, PaddingY } from '../tailwind/types/Padding';
import type { BorderRadius } from '../tailwind/types/Border';
import type { BackgroundColor } from '../tailwind/types/Color';
import { getBorderRadiusClasses, getClassName, getPaddingXClasses, getPaddingYClasses, getBackgroundColorClasses, getHoverClasses, getFocusOutlineClasses, getTextColorOnBackground } from '../tailwind/class_name_compiler';

interface StoryblokIconButton extends SbBlokData, PaddingX, PaddingY, BorderRadius, BackgroundColor {
    component: "icon_button";
    text?: string;
    icon: {
        type: string;
        icon: string;
    };
    link: {
        linktype: string;
        cached_url: string;
    }
    submit?: boolean;
}


interface Props {
    blok: StoryblokIconButton;
}

const { blok } = Astro.props;

if (!blok.link) {
    blok.link = {
        linktype: 'url',
        cached_url: '#',
    };
}

if (blok.link.linktype === 'story') {
    blok.link.cached_url = `/${blok.link.cached_url}`;
}

if (blok.link.cached_url == '/home') {
    blok.link.cached_url = '/';
}

const classNameColor = getClassName(blok, {
    decorators: [
        {decorator: getTextColorOnBackground},
    ]
});

const className = getClassName({...blok, hover: 'background'}, {
    decorators: [
        {decorator: getBorderRadiusClasses},
        {decorator: getPaddingXClasses},
        {decorator: getPaddingYClasses},
        {decorator: getBackgroundColorClasses},
        {decorator: getHoverClasses, options: {colorName: 'background_color', colorTypeName: 'background_color_type'}},
        {decorator: getFocusOutlineClasses, options: {colorName: 'background_color'}},
    ]
});
---

{blok.submit ? 
<button
    {...storyblokEditable(blok)}
    class:list={["inline-flex items-center justify-center border border-transparent font-medium text-white transition focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 cursor-pointer leading-none", className]}
    type="submit"
>
    <i class:list={[blok.icon.type, blok.icon.icon, classNameColor]} aria-hidden="true"></i>
    <span class:list={["ml-2", classNameColor]}>{blok.text}</span>  
</button>
:
<a
    {...storyblokEditable(blok)}
    href={blok.link.cached_url}
    class:list={["inline-flex items-center justify-center border border-transparent font-medium text-white transition focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 cursor-pointer leading-none", className]}
    type="button"
>
    <i class:list={[blok.icon.type, blok.icon.icon, classNameColor]} aria-hidden="true"></i>
    <span class:list={["ml-2", classNameColor]}>{blok.text}</span>  
</a>
}