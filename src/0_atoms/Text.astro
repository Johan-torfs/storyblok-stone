---
import { storyblokEditable, type SbBlokData, type ISbRichtext, renderRichText } from '@storyblok/astro';
import TextSvelte from './text/Text.svelte';
import { getClassName, getFontSizeClasses, getMarginBottomClasses, getTextCenterClasses, getTextMaxWidthClasses } from '../tailwind/class_name_compiler';
import type { MarginBottom } from '../tailwind/types/Margin';
import type { TextSize, TextCenter, TextMaxWidth } from '../tailwind/types/Text';

interface StoryblokParagraph extends SbBlokData, TextSize, TextCenter, TextMaxWidth, MarginBottom {
    component: 'paragraph';
    content: ISbRichtext;
    interactive?: boolean;
    type: 'paragraph' | 'paragraph-faded' | 'link' | 'text';
}


interface Props {
    blok: StoryblokParagraph;
}

const { blok } = Astro.props;

const className = getClassName(blok, {
    decorators: [
        {decorator: getFontSizeClasses},
        {decorator: getTextCenterClasses},
        {decorator: getMarginBottomClasses},
        {decorator: getTextMaxWidthClasses}
    ]
});

if (!blok.type) blok.type = 'paragraph';
 
const html = renderRichText(blok.content);
const storyblokEditableData = storyblokEditable(blok);
let htmlWithClass = '';
switch (blok.type) {
    case 'text':
        htmlWithClass = html
            .replace(/<p>/g, `<span class="${className}" data-blok-c='${storyblokEditableData['data-blok-c']}' data-blok-uid='${storyblokEditableData['data-blok-uid']}' interactive='${!!blok.interactive}'>`)
            .replace(/<\/p>/g, '</span>')
        break;
    case 'link':
        htmlWithClass = html
            .replace(/<p>/g, `<span class="${className + ' group-[.link]:group-hover:underline'}" data-blok-c='${storyblokEditableData['data-blok-c']}' data-blok-uid='${storyblokEditableData['data-blok-uid']}' interactive='${!!blok.interactive}'>`)
            .replace(/<\/p>/g, '</span>')
        break;
    case 'paragraph-faded':
        htmlWithClass = html
            .replace(/<p>/g, `<p class="${className + ' dark:text-primary-200/70 text-primary-950/70'}" data-blok-c='${storyblokEditableData['data-blok-c']}' data-blok-uid='${storyblokEditableData['data-blok-uid']}' interactive='${!!blok.interactive}'>`)
            .replace(/<\/p>/g, '</p>')
        break;
    default:
        htmlWithClass = html
            .replace(/<p>/g, `<p class="${className}" data-blok-c='${storyblokEditableData['data-blok-c']}' data-blok-uid='${storyblokEditableData['data-blok-uid']}' interactive='${!!blok.interactive}'>`)
        break;
}
---

{blok.interactive ? <TextSvelte htmlWithClass={htmlWithClass} client:visible/> : <Fragment set:html={htmlWithClass} class=" max"/>}
