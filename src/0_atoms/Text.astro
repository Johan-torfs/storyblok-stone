---
import { storyblokEditable, type SbBlokData, type ISbRichtext, renderRichText } from '@storyblok/astro';
import TextSvelte from './text/Text.svelte';
import { getClassName, getFontClasses, getFontSizeClasses, getMarginBottomClasses, getTextCenterClasses, getTextColorClasses, getTextMaxWidthClasses, getTextDecorationClasses, getTextUppercaseClasses } from '../tailwind/class_name_compiler';
import type { TextColor } from '../tailwind/types/Color';
import type { MarginBottom } from '../tailwind/types/Margin';
import type { TextFont, TextSize, TextCenter, TextMaxWidth, TextDecoration, TextUpperCase } from '../tailwind/types/Text';

interface StoryblokParagraph extends SbBlokData, TextColor, TextFont, TextSize, TextCenter, TextMaxWidth, TextDecoration, TextUpperCase, MarginBottom {
    component: 'paragraph';
    content: ISbRichtext;
    content_dark?: ISbRichtext;
    interactive?: boolean;
}


interface Props {
    blok: StoryblokParagraph;
}

const { blok } = Astro.props;

const className = getClassName(blok, {
    decorators: [
        {decorator: getTextColorClasses},
        {decorator: getFontClasses},
        {decorator: getFontSizeClasses},
        {decorator: getTextCenterClasses},
        {decorator: getMarginBottomClasses},
        {decorator: getTextMaxWidthClasses},
        {decorator: getTextDecorationClasses},
        {decorator: getTextUppercaseClasses}
    ]
});
 
const html = renderRichText(blok.content);
const html_dark = renderRichText(blok.content_dark);
const storyblokEditableData = storyblokEditable(blok);
const htmlWithClass = html
    .replace(/<p>/g, `<p class="${className + (!!html_dark ? ' dark:hidden' : '')}" data-blok-c='${storyblokEditableData['data-blok-c']}' data-blok-uid='${storyblokEditableData['data-blok-uid']}' interactive='${!!blok.interactive}'>`)
const htmlDarkWithClass = html_dark
    .replace(/<p>/g, `<p class="${className + ' hidden dark:block'}" data-blok-c='${storyblokEditableData['data-blok-c']}' data-blok-uid='${storyblokEditableData['data-blok-uid']}' interactive='${!!blok.interactive}'>`)
---

{blok.interactive ? <TextSvelte htmlWithClass={htmlWithClass + htmlDarkWithClass} client:visible/> : <Fragment set:html={htmlWithClass + htmlDarkWithClass} class=" max"/>} 
