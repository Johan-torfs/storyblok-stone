---
import { useStoryblokApi, type SbBlokData } from "@storyblok/astro";
// @ts-ignore
import StoryblokComponent from "@storyblok/astro/StoryblokComponent.astro";
import { ViewTransitions } from "astro:transitions";
import '@fortawesome/fontawesome-free/css/fontawesome.min.css';
import '@fortawesome/fontawesome-free/css/solid.min.css';

const storyblokApi = useStoryblokApi()
const response = await storyblokApi.get('cdn/stories/settings/base-layout', {
  version: import.meta.env.PUBLIC_VERCEL_ENV == 'production' ? 'published' : 'draft',
}).then((response: any ) => {
    return response;
}).catch((error: any) => {
    console.log(error);
});

const navigation = response.data.story.content.navigation;
const header = response.data.story.content.header;
const footer = response.data.story.content.footer;
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Astro</title>

        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Fraunces:opsz,wght@9..144,700&family=Hanken+Grotesk:wght@500;700;800&family=Montserrat:wght@500;700&display=swap" rel="stylesheet">
		<ViewTransitions />
	</head>
	<body class="bg-white dark:bg-black transition-colors">
		{navigation?.map((blok: SbBlokData) => {            
			return <StoryblokComponent blok={blok} />
		})}
        <main><slot/></main>
	</body>
</html>

<script>
	const prefersDark = window.matchMedia('(prefers-color-scheme: dark)');
	const prefersLight = window.matchMedia('(prefers-color-scheme: light)');

	const theme = localStorage.getItem('theme');

	if (theme == 'dark') {
		document.documentElement.classList.add('dark');
		localStorage.setItem('theme', 'dark');
	} else if (theme == 'light') {
		document.documentElement.classList.remove('dark');
		localStorage.setItem('theme', 'light');
	} else if (prefersDark.matches) {
		document.documentElement.classList.add('dark');
		localStorage.setItem('theme', 'dark');
	} else if (prefersLight.matches) {
		document.documentElement.classList.remove('dark');
		localStorage.setItem('theme', 'light');
	} else {
		document.documentElement.classList.add('light');
		localStorage.setItem('theme', 'light');
	}

	document.addEventListener('astro:after-swap', () => {
		const theme = localStorage.getItem('theme');

		if (theme == 'dark') {
			document.documentElement.classList.add('dark');
			localStorage.setItem('theme', 'dark');
		} else if (theme == 'light') {
			document.documentElement.classList.remove('dark');
			localStorage.setItem('theme', 'light');
		} else if (prefersDark.matches) {
			document.documentElement.classList.add('dark');
			localStorage.setItem('theme', 'dark');
		} else if (prefersLight.matches) {
			document.documentElement.classList.remove('dark');
			localStorage.setItem('theme', 'light');
		} else {
			document.documentElement.classList.add('light');
			localStorage.setItem('theme', 'light');
		}
	})
</script>